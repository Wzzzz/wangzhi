Given an array S of n integers, are there elements a, b, c in S 
such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note: The solution set must not contain duplicate triplets.

For example, given array S = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]
//暴力破解 答案对 但时间O(n^3) 不符合题目要求
public class Solution {
    public List<List<Integer>> threeSum(int[] nums) {                 //int[] nums表示数组（整数数组int）
    List<List<Integer>> res = new ArrayList<List<Integer>>();
    List<Integer> list = new ArrayList<Integer>(); 
    Arrays.sort(nums);
    for(int i = 0; i < nums.length; i++)
    {
      for(int a = i+1; a < nums.length; a++)
      {
        for(int b = a+1; b < nums.length; b++)
        {
          if(nums[i]+nums[a]+nums[b] == 0)
          {list.add(nums[i]);
           list.add(nums[a]);
           list.add(nums[b]);
           boolean bo = res.contains(list);
           if(!bo)
           {res.add(new ArrayList(list));}   //add(list)是错误的 ()中的list此时表示的是对象而不是数值   每次循环虽然对象list的值改变
           list.clear();                     //但仍为同一个对象 list值会被覆盖  前面add(nums[i])不会覆盖因为nums[i]本身为值
           }                                 //解决办法就是在每次for循环中add(对象)前重新new对象  
        }                                    //即add(new ArrayList(list)) 表示新建了一个对象 其内容和list一样 但不是list                               
       }                                     //可参考http://www.cnblogs.com/gongheng/p/5766764.html
      }   
    return res;
    }
}
