//这题做吐了。。。。 暴力求解
//You are given two non-empty linked lists representing two non-negative integers.
//The digits are stored in reverse order and each of their nodes contain a single digit. 
//Add the two numbers and return it as a linked list.
//You may assume the two numbers do not contain any leading zero, except the number 0 itself.
//Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
//Output: 7 -> 0 -> 8
//用两个链表表示两个非负整数2->4->3表示243， 


//
* Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 //
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
     int s = 0;
     int d = 0;
     int q = 0;
     ListNode l3 = l1;
     ListNode l4 = l2;
     ListNode l5 = new ListNode(0);
     while(l1 != null && l2 != null)
     {
     if(l1.val + l2.val + d < 10)
     { s = l1.val + l2.val;
       l1.val = s + d;
       l2.val = s + d;
       d = 0;     
     }
     else if(l1.val + l2.val + d >= 10)
     { s = l1.val + l2.val - 10;
       l1.val = s + d;
       l2.val = s + d;
       d = 1;
     }
     l1 = l1.next;
     l2 = l2.next;
     }
     if(l1 != null && l2 == null)
     { q = 0;
       while(l1.val+d == 10)
       {l1.val = 0;
        l1=l1.next;
        if(l1 == null)
        break;
       }
       if(l1 != null && l1.val != 10-d)
       {
        l1.val = l1.val+d;
        d = 0;
        return l3;
       }
      }
     if(l1 == null && l2 != null)     
     {
      q = 1; 
      while(l2 != null && l2.val == 10-d)
      { l2.val = 0;
        l2=l2.next;
        if(l2 == null)
        break;
      }
      if(l2 != null && l2.val+d != 10)
       {
        l2.val = l2.val+d;
        d = 0;
        return l4;
       }
      }
     if(d == 1)
     {if(q == 0) 
      { l5.val =1;
        ListNode l6 = l3;
        while(l3.next != null)
        {l3 = l3.next;}
        l3.next = l5;
        return l6;}
      else if(q == 1) 
      { l5.val =1;
        ListNode l6 = l4;
        while(l4.next != null)
        {l4 = l4.next;}
        l4.next = l5;
        return l6;}
      }
      return l3;
     }
    }
