Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as a binary tree
in which the depth of the two subtrees of every node never differ by more than 1.
Given a binary tree, determine if it is height-balanced.
For this problem, a height-balanced binary tree is defined as a binary tree 
in which the depth of the two subtrees of every node never differ by more than 1.
//判断一个树是否为平衡树  平衡树 所有节点的左右子树长度差不超过1  递归求长度 再递归判断是否平衡
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isBalanced(TreeNode root) {
      if(root == null)
       return true;
     if(Math.abs(depth(root.left)-depth(root.right))>1)
        return false;
     else 
      return isBalanced(root.right) && isBalanced(root.left);    
    }
    public int depth(TreeNode root)
    {if(root == null)
        return 0;
     return  Math.max(depth(root.left),depth(root.right))+1;
    }
}
