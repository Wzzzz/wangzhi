//Say you have an array for which the ith element is the price of a given stock on day i.
//If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock)
//design an algorithm to find the maximum profit.
Example 1:
Input: [7, 1, 5, 3, 6, 4]
Output: 5

max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)
Example 2:
Input: [7, 6, 4, 3, 1]
Output: 0

In this case, no transaction is done, i.e. max profit = 0.
//
类似股票价格一段时间的波动 先买再卖  求最大利益 
 
//参考别人思路：最简单用两层遍历方式 时间超过 必然不行
//一层遍历的话 指针向前走 用min记录下前面所有值中最小的值 然后每次更新指针的值减去前面最小的结果  max保存最大的值 
public class Solution {
    public int maxProfit(int[] prices) {
    if(prices.length == 0)
     return 0;
    int min = prices[0];
    int max = 0;
    for(int i = 0; i<prices.length; i++)
    {    
     min = Math.min(min,prices[i]);
     max = Math.max(max,prices[i] - min);      
    } 
    return max;
  }
}
