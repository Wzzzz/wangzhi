//Say you have an array for which the ith element is the price of a given stock on day i.
//Design an algorithm to find the maximum profit. 
//You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times). 
//However, you may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).
//类似于股票买卖时间表 价格不断浮动 收益=买入-卖出 注意这题可以多次买卖 先买再卖 但是同一时间段只能持有一种股票 即要卖了再买
//思路就是按照数值浮动 每次最低值买 最高值卖 总是有收益 注意是最低才买 即只有后面数值小于前面的 就去后面的数值为起点 
//且在下一个后面小于前面数值点取终点 最后取值  

public class Solution {
    public int maxProfit(int[] prices) {
    if(prices.length==0)
    return 0;
    int min = prices[0];
    int sum = 0;
    for(int i = 1; i<prices.length;i++)
     {
      min = Math.min(prices[i],min);
      if(prices[i]>prices[i-1])
      { sum = prices[i] - min + sum; 
        min = prices[i];    
      }
     }
     return sum;   
    }
}
