//先做个了个插入单个值到二叉树的方法 递归完成
 public TreeNode insert(int x,TreeNode y)
    {
      if(y == null)
      y = new TreeNode(x);
      else if(x<y.val)
      y.left = insert(x,y.left);
      else if(x>y.val)
      y.right = insert(x,y.right);
      return y;
    }
//问题就是当连续插入的元素成为的树 并不是二叉查找树 因为数组从小到大排序 结果就是偏向一边
//主要问题是在插入情况下 避免左右不平衡


//对于一个树ABCDEF
前序遍历，也叫先根遍历，遍历的顺序是，根，左子树，右子树
遍历结果：ABDECF
中序遍历，也叫中根遍历，顺序是 左子树，根，右子树
遍历结果：DBEAFC
后序遍历，也叫后根遍历，遍历顺序，左子树，右子树，根
遍历结果：DEBFCA

//看错 这题要求的是平衡二叉树！！
//平衡二叉树如果靠插入再旋转的方式很麻烦 尽量避免 
//考虑这是一个排序数组 可以每次插入一个数组的中间值 然后对切开后的数组左右递归下去 避免左右高度不平衡
//下面是自己写的 用了递归的思想  两个递归实现 一个递归单个int数值插入树的操作  
//另一个递归实现 一个排序的中间值插入 分成的两个子数组再分别选择中间值插入 递归完成
public class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
    if(nums.length == 0)
     return null;
    TreeNode y = null;
    int start = nums.length;
    int end = 0;
    y = insertmid(y,nums,start,end);
    return y;
    }
    public TreeNode insertmid(TreeNode y,int[] nums,int start,int end) //插入一个数组中间值 以及左右子数组的中间值 递归下去 实现左右平衡
    {    
        int mid = (start+end)/2;
        y = insert(nums[mid],y);
        if(start == mid || end == mid)
        return y;
        y = insertmid(y,nums,start,mid);
        y = insertmid(y,nums,mid,end);
        return y;
    }
    
    public TreeNode insert(int x,TreeNode y)  //插入一个数到树中 单一插入数组会导致二叉树左右平衡
    {
      if(y == null)
      y = new TreeNode(x);
      else if(x<y.val)
      y.left = insert(x,y.left);
      else if(x>y.val)
      y.right = insert(x,y.right);
      return y;
    }
}
