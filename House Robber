//You are a professional robber planning to rob houses along a street. 
//Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses 
//have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.
//Given a list of non-negative integers representing the amount of money of each house, 
//determine the maximum amount of money you can rob tonight without alerting the police.
//求一个数组不相邻组合最大值  
//举个例子：一个街道上一列房子  每个房子放不定数量钱(数组)  
//一个人从中抢钱  不能抢连续相邻的房子 求可获得最大收益 
//典型动态规划问题 思路：按顺序数组向前 到每个节点分为两种情况（取该点的值/不取该点的值）
//1.取该点的值  累和 = 该点的值 + 上个点不取值的累和
//2.不取该点的值 累和 = max（上个点取值累和，上个点不取值累和） 一个循环
public class Solution {
    public int rob(int[] nums) {
    if(nums.length == 0)
     return 0;
    int[][] ap = new int[nums.length][2];
    ap[0][0] = 0; 
    ap[0][1] = nums[0];
      for(int i = 1;i<nums.length;i++)
      { ap[i][0] = Math.max(ap[i-1][0],ap[i-1][1]);
        ap[i][1] = ap[i-1][0] + nums[i];
      }
     return Math.max(ap[nums.length-1][0],ap[nums.length-1][1]);
    }
}
