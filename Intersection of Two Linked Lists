Write a program to find the node at which the intersection of two singly linked lists begins.
For example, the following two linked lists:
A:          a1 → a2
                   ↘
                     c1 → c2 → c3
                   ↗            
B:     b1 → b2 → b3
begin to intersect at node c1.
Notes:
If the two linked lists have no intersection at all, return null.
The linked lists must retain their original structure after the function returns.
You may assume there are no cycles anywhere in the entire linked structure.
Your code should preferably run in O(n) time and use only O(1) memory.
 给两个链表 如果有交点 求其交点 没有返回null 
 注意链表结构中没有环  运行时间需符合要求
 
 别人思路：这题上下链表指针一一前进找即可  关键是上下长度不一 先求上下链表长度 较长的那个链表先把长度差走完 再同时前进找交点 
 因为交点后面结构是一样的 所以不一样长度只可能在前面
 
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
public class Solution {
    public ListNode getIntersectionNode(ListNode headA, ListNode headB) {
        ListNode first = headA;
        int a = 0;
        ListNode sec = headB;
        int b = 0;
        while(first!= null)
         {first = first.next;
          a++;}
        while(sec!= null)
         {sec = sec.next;
          b++;}
        if(a>b)
        {for(int d=0;d<a-b;d++)  
         {headA = headA.next;}
        } 
        if(a<b) 
        {for(int d=0;d<b-a;d++)
          {headB = headB.next;}
        }  
        if(headA == null|| headB == null)
           return null;
        while(headA!=headB)
         { headA = headA.next;
           headB = headB.next;
           if(headA == null|| headB == null)
           return null;
         }
        return headA;
    }
}
