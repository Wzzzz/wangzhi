//Merge two sorted linked lists and return it as a new list. 
//The new list should be made by splicing together the nodes of the first two lists.
//合并两个已排序的单链表 

public class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
    if(l1 == null)
    {return l2;}
    if(l2 == null)
    {return l1;}                        //初始化 先判断是否有一个链表为空 
    ListNode l3 = null;                 
    if(l1.val <= l2.val)                //比较l1和l2的初值 并将l3等于值小的链表(l1 or l2）
     {l3 = l1;
      l1 = l1.next;}
    else
     {l3 = l2;
      l2 = l2.next;
     }
     l3.next = null;                     //将l3的指针指向空
     ListNode l4 = l3;                    //l4 = l3初始值（l1或者l2初始值）+ l3的指针（当前为空）
    while(l1 != null && l2 != null)
     { 
      if(l1.val <= l2.val)
        {
         l3.next = l1;                  //在不改变数据结构情况下 不断比较l1和l2的值 并改动l3.next的指针到l1和l2中
         l1 = l1.next;
        }
      else 
        {
         l3.next = l2;
         l2 = l2.next;
        }
      l3 = l3.next;                    //将l3指针向前移动
      l3.next = null;                  //且将下一个指针赋予空 重新循环
      }   
    if(l1 == null)                    //当循环结束 l1或者l2结束  则判断 如果其中一个链表指向已经结束 则将l3的指针指向另外一个链表 
      {l3.next = l2;}
    else{l3.next = l1;}      
    return l4;              //最后返回l4 ！！！  不能是l3 因为l3=l3.next在不断改变  因为l4 = l3初始值 + l3指针
    }
}
