//Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.
//push(x) -- Push element x onto stack.
//pop() -- Removes the element on top of the stack.
//top() -- Get the top element.
//getMin() -- Retrieve the minimum element in the stack.
//Example:
//MinStack minStack = new MinStack();
//minStack.push(-2);
//minStack.push(0);
//minStack.push(-3);
//minStack.getMin();   --> Returns -3.
//minStack.pop();
//minStack.top();      --> Returns 0.
//minStack.getMin();   --> Returns -2.
//设计一个栈 push是推入元素 pop删除栈上的元素且不用返回值 top是查看栈上的元素  getMin()是得到栈中最小值
//这是别人思路 最重要的一点理解错了是本题中栈是空的 要先推入元素 再去得到最小值  
//而不是给定一个已有一些列元素的栈 找到最小值 所以一开始考虑用遍历等等方法都不合适 
//因此我们在推入元素时就可以用一个min保存最小值 当有数值更小的推入时候 把这个min放在上面 再把更小的值推入
//同样取出的时候 如果推出的元素等于当前min  也要把前一个推入的min推出且实现min的更新（把之前推入）
public class MinStack {
    
   Stack<Integer> stack = new Stack<Integer>(); 
   int min=Integer.MAX_VALUE;
    public void push(int x) {
      if(x<=min)
      {stack.push(min);
       min = x;}
      stack.push(x);    
    }
    public void pop() {
      if(stack.peek() == min)
      {stack.pop();
          min = stack.pop();
      }
      stack.pop();
    }
    public int top() {
      return stack.peek();
    }
    public int getMin() {
       return min;     
     }
  }
