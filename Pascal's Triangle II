Given an index k, return the kth row of the Pascal's triangle.

For example, given k = 3,
Return [1,3,3,1].

Note:
Could you optimize your algorithm to use only O(k) extra space?

//杨辉三角[1]       0
         [1 1]     1
        [1 2 1]    2
       [1 3 3 1]   3
//这样一个用O(k)空间 即一个linkedlist  将值先1 12 23 34..相加在链表后面  然后根据前面一个链表大小删去前面的值   
public class Solution {
    public List<Integer> getRow(int rowIndex) {
        List<Integer> list = new LinkedList<Integer>();
        int k = 0;
        if(rowIndex >= 0)
          list.add(1);
        if(rowIndex >= 1)
          list.add(1);
        for(int i = 2;i<=rowIndex;i=i+1)
        {  list.add(1);
           for(int x = 0;x<i-1;x=x+1)
           {
            k = list.get(x)+list.get(x+1);
            list.add(k);
            }
           list.add(1); 
           for(int x = 0;x<i;x++)
            {list.remove(0);}
        }
        return list;
    }
}
