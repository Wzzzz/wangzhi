Given a binary tree and a sum, find all root-to-leaf paths where each path's sum equals the given sum.

For example:
Given the below binary tree and sum = 22,
              5
             / \
            4   8
           /   / \
          11  13  4
         /  \    / \
        7    2  5   1
return
[
   [5,4,11,2],
   [5,8,4,5]
]

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {                                                                                          
    public List<List<Integer>> pathSum(TreeNode root, int sum) {  
        List<List<Integer>> res = new LinkedList<List<Integer>>();
        List<Integer> list = new LinkedList<Integer>(); 
        pathSum(root, sum , list, res);                                                      
        return res;                                                  
    }                                                                                         
    public void pathSum(TreeNode root, int sum, List<Integer> list, List<List<Integer>> res) {   
        if (root == null)                                                             
            return;                                                            
        list.add(root.val);                                                   
        if (root.left == null && root.right == null && sum == root.val)                                                  
        {                                                                                                         
          res.add(new LinkedList(list));                                                                                 
          list.remove(list.size()-1);                                                                     
          return;                                                                                         
        }                           
        else {                              
          pathSum(root.left, sum - root.val, list, res);  
          pathSum(root.right, sum - root.val, list, res);  
        }                                                                                             
        list.remove(list.size()-1);                                                                      
        }  
    }  
