//Given a non-negative integer represented as a non-empty array of digits, plus one to the integer
//You may assume the integer do not contain any leading zero, except the number 0 itself.
//The digits are stored such that the most significant digit is at the head of the list.
//给定一个数组 末位加1 得出结果 注意进位
public class Solution {
    public int[] plusOne(int[] digits) {
     int i = 0;
     int m = digits.length - 1;
     digits[m] = digits[m] + 1;
     while(m != -1)
     {
        digits[m] = digits[m] + i;
        i = digits[m]/10;
        digits[m] = digits[m]%10;
        m = m-1;
     }     
     if (i==1)                                  
     {
     int[] k = new int[digits.length+1];
     k[0]=1;
     int n = 0;
     while(n !=digits.length)
      { k[n+1] = digits[n];
        n++;
      }
     return k;         
     }
     else 
     return digits;
    }
}
// 别人的方法 最后一段可用这种方式 不必再设一个k循环赋值  直接给digits重新定义一个digits.length+1长度的数组 并在0位定义1 即10000.....
//   if (i==1)
     {
     digits = new int[digits.length+1]   ;
     digits[0]=1;
     }
     return digits;
// 另外不用循环 也可使用System.arraycopy方法 实现数组复制   
     if (i==1){
     int[] k = new int[digits.length+1];
     k[0] = 1;
     System.arraycopy(digits,0,k,1,digits.length);
     }
