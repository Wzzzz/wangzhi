//Given an array and a value, remove all instances of that value in place and return the new length.
//Do not allocate extra space for another array, you must do this in place with constant memory.
//The order of elements can be changed. It doesn't matter what you leave beyond the new length.
//Example:
//Given input array nums = [3,2,2,3], val = 3
//Your function should return length = 2, with the first two elements of nums being 2.
//Hint:
//Try two pointers.
//Did you use the property of "the order of elements can be changed"?
//What happens when the elements to remove are rare?
//27与26题几乎一样 给定一个数组 和一个值  把数组和该值相同的数删去 并返回删除后的长度m
//注意 求得解是最后返回的数组前m个元素  就用两个指针按位走 一个遍历数组 与给定值不同的元素赋予另一个指针的位置  最后返回另一个指针长度 
public class Solution {
    public int removeElement(int[] nums, int val) {
    int n = nums.length;
    int m = 0;
    if(n == 0)
     return 0;
    for(int i = 0; i<n; i++)
    {
     if(nums[i] != val)
      {
       nums[m] = nums[i];
       m++;
      }
    }
    return m;   
    }
}
