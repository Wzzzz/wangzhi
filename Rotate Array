
//Rotate an array of n elements to the right by k steps.
//For example, with n = 7 and k = 3, the array [1,2,3,4,5,6,7] is rotated to [5,6,7,1,2,3,4].
//Note:
//Try to come up as many solutions as you can, there are at least 3 different ways to solve this problem.
//Hint:
//Could you do it in-place with O(1) extra space?
 //给一个包含n个元素数组 向右循环k步 注意向右移动时 最右的元素插入到最左边 其余元素向右进一位  
 //自己思路：再设一个数组  保存循环后的值 ！！注意当循环的步数k超过数组个数n 注意用k除n取余 因为循环k=n次仍为原来数组
 //然后注意不要返回值 只有修改下原来的nums数组
public class Solution {
    public void rotate(int[] nums, int k) {
     int[] newnums = new int[nums.length];
     int n = nums.length;
     while(k>n&&n!=1)
      {k = k%n;}
     if(k<=n){
     for(int i = 0;i<n;i++)
     {if(i<k)
      newnums[i] = nums[n-k+i];
      else
      newnums[i] = nums[i-k];
      }
     for(int i = 0;i<n;i++)
     {nums[i] = newnums[i];}
     }
     }
}
//参考一下其他的思路 用O(1)空间来做此题 因为只有O(1)空间 所以不破坏数组情况下只能对元素进行交换 用一个int保存实现元素a与b互换位置
//设计 一个reverse方法实现整个数组所有值的交换 1234567->7654321然后  根据题意
//可知1234567  k=3  —>先反转1234—>4321  再反转567—>765 这样数组成了4321765  最后再反转成5671234 符合题意 
public void rotate(int[] nums, int k) {

    if(nums == null || nums.length < 2){
        return;
    }
    
    k = k % nums.length;
    reverse(nums, 0, nums.length - k - 1);
    reverse(nums, nums.length - k, nums.length - 1);
    reverse(nums, 0, nums.length - 1);
    
}
private void reverse(int[] nums, int i, int j){
    int tmp = 0;       
    while(i < j){
        tmp = nums[i];
        nums[i] = nums[j];
        nums[j] = tmp;
        i++;
        j--;
    }
}
}

