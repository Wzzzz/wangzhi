//Implement int sqrt(int x).
//Compute and return the square root of x.
//求解一个整形数的平方根
结合Math.sqrt(double)方法可解 注意数据类型的转换 在数值前加上(数据类型)即可 
public class Solution {
    public int mySqrt(int x) {
     double b = Math.sqrt((double)x); // Math.sqrt(double a)  
     return (int)b;
    }
}
//上面方法虽然能解 但达不到题目锻炼效果 下面用数学方法解：
//自己解题思路 
//二分法 将x除以2 判断其平方是否大于x  大于x再除以2 不断除 直到其平方小于x 然后不断加1 直到其平方等于或大于x(注意大于x的话解值还要减一)
//注意 因为x的平方可能会超过int的最大上限  所以先转为long型(64位) 再转回int。
//a*a<=b这些判断条件可以换成a<=b/a 这样就不用转换成long类型 
public class Solution {
    public int mySqrt(int x) {
     long b = (long)x;
     if(b==0 || b==1)
      return (int)b;
     if(b==4)
      return 2;
     long a = b/2;
     while(true)
     { if(a*a<=b)
         {a++;
         if(a*a>b)
          {a--;
           break;}
         if(a*a==b)
           break;
         }
       if(a*a>b)
        {if(a == 1)
           a = 1;
         else a = a/2;}
     }   
     return (int)a;
    }
}
 别人的思路：用两个指针 一个指针指1 一个Int最大值 取两个指针中间值 当中间值平方大于x  右指针减1 当中间值平方小于x 左指针加1 
 当到mid临界值 返回mid
 public int sqrt(int x) {
    if (x == 0)
        return 0;
    int left = 1, right = Integer.MAX_VALUE;
    while (true) {
        int mid = left + (right - left)/2;
        if (mid > x/mid) {
            right = mid - 1;
        } else {
            if (mid + 1 > x/(mid + 1))
                return mid;
            left = mid + 1;
        }
    }
}
