//Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).
//For example, this binary tree [1,2,2,3,4,4,3] is symmetric:
    1
   / \
  2   2
 / \ / \
3  4 4  3
//But the following [1,2,2,null,3,null,3] is not:
    1
   / \
  2   2
   \   \
   3    3
//Note:
//Bonus points if you could solve it both recursively and iteratively.
//给一个二叉树 检查是否对称 可以用递归和迭代方法
//先考虑recursively递归方法：考虑将一个二叉树分成两个二叉树部分进行比较 左边与右边进行比较 右边与左边比较 递归下去即可
//用equal(p.right,q.left)&&equal(p.left,q.right)这种方式 只有两个二叉树所有对称节点都相同ture才会返回ture 有一个false则是false
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 /
public class Solution {
    public boolean isSymmetric(TreeNode root) 
    { 
      if(root == null)
       return true;
      TreeNode p = root.right;
      TreeNode q = root.left;    
      return equal(p,q);
    }
    public boolean equal(TreeNode p,TreeNode q)
    { if(p == null && q == null)
        return true;
      if((p!= null && q == null)||(p == null && q != null)||(p.val != q.val))
        return false;
      return equal(p.right,q.left) && equal(p.left,q.right);    
    }
}
//再用迭代的思想做如下：用两个栈 分别用来保存左右两个子树的数据 判断比较每个子树右是否等于左，左是否等于右  
//把根节点先推进栈 再依次将对应比较的左右节点推进 同时一次出栈一个节点进行比较 并把出栈子节点压进栈 
//直到出现左右不符 或者 循环结束一个栈中还剩节点 则返回false 否则返回true。
public class Solution {
    public boolean isSymmetric(TreeNode root) {
      Stack<TreeNode> stack1 = new Stack <> (); 
      Stack<TreeNode> stack2 = new Stack <> ();
      if(root == null)
       return true;
      if(root.right == null && root.left == null)
       return true;
      if((root.right == null && root.left != null)||(root.right != null && root.left == null))
       return false;
      stack1.push(root.right);
      stack2.push(root.left);
      while(!stack1.empty()&&!stack2.empty())
      {
       TreeNode p = stack1.pop();
       TreeNode q = stack2.pop();
       if(p.val != q.val)
          return false;
       if((p.right != null && q.left == null)||(p.left != null && q.right == null)
        ||(p.right == null && q.left != null)||(p.left == null && q.right != null))
          return false;
       if(p.right != null && q.left != null)
        {stack1.push(p.right);
         stack2.push(q.left);}
       if(p.left != null && q.right != null)
        {stack1.push(p.left);
         stack2.push(q.right);}
      }
 //     if(stack1.empty()&&stack2.empty())     //最后这些 不用比较两个栈是否都为空 直接返回true也能AC 
        return true;                          //因为前面循环中判断了所有节点的子节点出现左右不均的情况
 //     else return false;                   
    }
}
